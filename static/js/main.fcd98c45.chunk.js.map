{"version":3,"sources":["fbase.js","components/AuthForm.js","components/Covid19.js","routes/Auth.js","components/Sweet.js","components/SweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","styles/GlobalStyle.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthFormStyles","styled","div","AuthForm","useState","email","password","form","setFrom","newAccount","setNewAccount","error","setError","onChange","e","target","value","name","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","className","onClick","require","config","Covid19Styles","section","Covid19","covidInfo","setCovidInfo","fetchData","today","Date","year","getFullYear","month","getMonth","day","getDate","currentDate","url","axios","get","res","data","response","body","covidItem","items","item","console","log","useEffect","decideCnt","deathCnt","AuthStyles","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","size","SweetStyles","Sweet","id","text","attachmentUrl","createdAt","isOwner","userObj","editing","setEditing","newSweet","setNewSweet","date","onDeleteClick","window","confirm","doc","delete","refFromURL","toggleEditing","update","autoFocus","src","SweetFactoryStyles","SweetFactory","sweet","setSweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","getDownloadURL","collection","add","now","creatorId","maxLength","htmlFor","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","style","opacity","backgroundImage","HomeStyles","Home","sweets","setSweets","orderBy","onSnapshot","snapshot","newArray","docs","map","document","ProfileStyles","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","userSweets","setUserSweets","getMySweets","where","updateProfile","index","signOut","push","NavigationStyles","nav","Navigation","to","RouterStyles","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","GlobalStyles","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyle","getElementById"],"mappings":"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","file":"static/js/main.fcd98c45.chunk.js","sourcesContent":["// v9 compat packages are API compatible with v8 code\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID \n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import React, { useState } from 'react';\nimport { authService } from \"fbase\";\nimport styled from 'styled-components';\n\nconst AuthFormStyles = styled.div`\n    width: 100%;\n    max-width: 320px;\n    display: flex;\n    flex-direction: column;\n    .authInput {\n        max-width: 320px;\n        width: 100%;\n        padding: 10px;\n        border-radius: 30px;\n        background-color: rgba(255, 255, 255, 1);\n        margin-bottom: 10px;\n        font-size: 12px;\n        color: black; \n        &:placeholder {\n            color: white;\n            opacity: 0.9;\n        }\n    }\n    .authSubmit {\n        text-align: center;\n        background: #04aaff;\n        color: white;\n        margin-top: 10;\n        cursor: pointer;\n    }\n    .authError {\n        color: tomato;\n        text-align: center;\n        font-weight: 500;\n        font-size: 12px;\n    }\n    .authSwitch {\n        color: #04aaff;\n        cursor: pointer;\n        margin-top: 10px;\n        margin-bottom: 50px;\n        display: block;\n        font-size: 12px;\n        text-decoration: underline;\n        text-align: center;\n    }\n`;\n\nconst AuthForm = () => {\n    // const [email, setEmail] = useState('')\n    // const [password, setPassword] = useState('')\n    // input 여러개 관리--> onChange 함수 1개만 만들면 됨\n    const [form, setFrom] = useState({\n        email: '',\n        password: ''\n    })\n    const { email, password } = form\n    //회원가입과 로그인 \n    const [newAccount, setNewAccount] = useState(true)\n    const [error, setError] = useState('')\n\n    const onChange = (e) => {\n        const { value, name } = e.target\n        setFrom({\n            ...form,\n            [name]: value\n        })\n    }\n\n    //authService에 함수들은 서버로 값을 요청해서 결괏값을 수신 받기까지 시간이 걸리기때문에\n    //로그인 또는 회원가입 인증이 처리된 이후에 실행하라고 async,await문 사용 \n    const onSubmit = async (e) => {\n        e.preventDefault()//submit 이벤트의 발생시 일어나는 새로고침 막아줌\n        try {\n            let data;\n            if(newAccount){\n                //Create newAccount\n                //브라우저 내장 데이터베이스(IndexedDB)에 사용자 정보 저장됨 \n                data = await authService.createUserWithEmailAndPassword(email, password)\n            } else {\n                //Log In\n                data = await authService.signInWithEmailAndPassword(email, password)\n            }\n        } catch(error){\n            setError(error.message)\n        }\n    }\n\n    const toggleAccount = () => {\n        setNewAccount(!newAccount)\n    }\n    \n    return (\n        <AuthFormStyles>\n           <form onSubmit={onSubmit}>\n               <input \n               type=\"email\" \n               name=\"email\" \n               placeholder=\"email\" \n               required\n               value={email}\n               onChange={onChange}\n               className=\"authInput\"\n               />\n               <input \n               type=\"password\" \n               name=\"password\" \n               placeholder=\"password\" \n               required\n               value={password}\n               onChange={onChange}\n               className=\"authInput\"\n               />\n               <input \n               type=\"submit\" \n               value={newAccount ? \"Create Account\" : \"Log In\"}\n               className=\"authInput authSubmit\"\n               />\n               {error && <span className=\"authError\">{error}</span>}\n           </form>\n           <span onClick={toggleAccount} className=\"authSwitch\">\n           {newAccount ? \"Sign In\" : \"Create Account\"}\n           </span>\n        </AuthFormStyles>\n    );\n};\n\nexport default AuthForm;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nrequire('dotenv').config()\n\nconst Covid19Styles = styled.section`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4rem;\n    margin-top: 2rem;\n    .covid_text {\n        color: tomato;\n    }\n`;\n\nconst Covid19 = () => {\n    const [covidInfo, setCovidInfo] = useState({})\n\n    const fetchData = async () => {\n        const today = new Date()\n        const year = today.getFullYear()\n        const month = today.getMonth() + 1\n        const day = today.getDate()\n        const currentDate = year + (month < 10 ? `0${month}` : month) + (day < 10 ? `0${day}` : day)\n        \n        const apiKey = process.env.REACT_APP_COVID_API_KEY\n        const url = `https://cors-anywhere.herokuapp.com/http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson?serviceKey=${apiKey}&startCreateDt=${currentDate}&endCreateDt=${currentDate}`\n        \n        try {\n            const res = await axios.get(url)\n            const covidItem = await res.data.response.body\n            setCovidInfo(covidItem.items.item)\n        } catch(error){\n            console.log(error.message)\n        }\n    }\n\n    useEffect(() => {\n        fetchData()\n    },[])\n\n    const { decideCnt, deathCnt } = covidInfo\n    return (\n        <Covid19Styles>\n            <h3><span className=\"covid_text\">COVID-19</span> 현재 상황</h3>\n            <ul>\n                <li>\n                    <span>누적확진자: {decideCnt}명</span>\n                </li>\n                <li>\n                    <span>사망자: {deathCnt}명</span>\n                </li>\n            </ul>\n        </Covid19Styles>\n    );\n};\n\nexport default Covid19;","import AuthForm from \"components/AuthForm\";\nimport Covid19 from \"components/Covid19\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport { FaTwitter, FaGithub } from 'react-icons/fa';\nimport { FcGoogle } from 'react-icons/fc';\nimport styled from \"styled-components\";\n\nconst AuthStyles = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    justify-content: center;\n    align-items: center;\n    .icon_twitter {\n        margin-bottom: 3rem;\n        color: #04AAFF;\n    }\n    .authBtns {\n        display: flex;\n        justify-content: space-between;\n        width: 100%;\n        max-width: 320px;\n        .authBtn {\n            cursor: pointer;\n            border-radius: 20px;\n            border: none;\n            padding: 10px 0px;\n            font-size: 12px;\n            text-align: center;\n            width: 150px;\n            background: white;\n            cursor: pointer; \n            svg {\n                margin-bottom: -2px;\n            }\n        }\n    }\n`;\n\nconst Auth = () => {\n\n    const onSocialClick = async (e) => {\n        const { name } = e.target\n        let provider;//소셜로그인 서비스 제공업체 \n        if(name === 'google'){\n            provider = new firebaseInstance.auth.GoogleAuthProvider()\n        } else if(name === 'github'){\n            provider = new firebaseInstance.auth.GithubAuthProvider()\n        }\n        const data = await authService.signInWithPopup(provider)//소셜로그인 진행 \n    }\n\n    return ( \n        <AuthStyles>\n            <FaTwitter className=\"icon_twitter\" size=\"5ex\"/>\n            <AuthForm/>\n           <div className=\"authBtns\">\n                <button name=\"google\" onClick={onSocialClick} className=\"authBtn\">\n                   Continue with Google <FcGoogle/>\n                </button>\n                <button name=\"github\" onClick={onSocialClick} className=\"authBtn\">\n                   Continue with Github <FaGithub/>\n                </button>\n           </div>\n           <Covid19/>\n        </AuthStyles>\n    );\n};\n\nexport default Auth;","import React, { useState } from 'react';\nimport { dbService, storageService } from 'fbase';\nimport { FaTrashAlt, FaPencilAlt } from 'react-icons/fa'\nimport styled from 'styled-components';\n\nconst SweetStyles = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    max-width: 320px;\n    margin-bottom: 2.5rem;\n    padding: 2rem;\n    border-radius: 10px;\n    background-color: #fff;\n    color: rgba(0, 0, 0, 0.8);\n    .container {\n        width: 100%;\n        max-width: 320px;\n        display: flex;\n        flex-direction: column;\n        .formInput {\n            width: 100%;\n            padding: 1rem 2rem;\n            border-radius: 20px;\n            border: 1px solid #000;\n            text-align: center;\n            background-color: #fff;\n            color: #000;\n        }\n        \n    }\n    .formBtn {\n        cursor: pointer;\n        width: 100%;\n        padding: 0.7rem 2rem;\n        text-align: center;\n        border-radius: 20px;\n        background-color: #04aaff;\n        color: #fff;\n        margin-top: 1rem;\n    }\n    .cancelBtn {\n        background-color: tomato;\n    }\n    .sweet_name {\n        position: absolute;\n        top: 3px;\n        left: 2rem;\n        color: #04aaff;\n        font-size: 1rem;\n    }\n    img {\n        position: absolute;\n        right: -10px;\n        top: 20px;\n        width: 50px;\n        height: 50px;\n        border-radius: 50%;\n        margin-top: 1rem;\n    }\n    .sweet_actions {\n        position: absolute;\n        right: 10px;\n        top: 10px;\n        span {\n            cursor: pointer;\n            margin-left: 1rem;\n        }\n    }\n`;\n\nconst Sweet = ({ id, text, attachmentUrl, createdAt, isOwner, userObj }) => {\n    const [editing, setEditing] = useState(false)\n    const [newSweet, setNewSweet] = useState(text)\n\n    const date = new Date(createdAt)\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const createdate = `${year}.${month}.${day}`\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm('삭제하시겠습니까?')//boolean 값 반환 \n        if(ok){\n            await dbService.doc(`sweets/${id}`).delete()\n            if(attachmentUrl !== ''){ //저장된 이미지 삭제 \n                await storageService.refFromURL(attachmentUrl).delete()\n            }\n        }\n    }\n\n    const toggleEditing = () => setEditing(!editing)\n\n    const onChange = (e) => {\n        const { value } = e.target \n        setNewSweet(value)\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        await dbService.doc(`sweets/${id}`).update({text: newSweet})\n        setEditing(false)\n    }\n    return (\n        <SweetStyles>\n            { editing ? (\n                <>\n                    <form onSubmit={onSubmit} className=\"container sweetEdit\">\n                        <input \n                        type=\"text\" \n                        required \n                        value={newSweet} \n                        onChange={onChange}\n                        placeholder=\"Edit your sweet\"\n                        autoFocus\n                        className=\"formInput\"\n                        />\n                        <input type=\"submit\" value=\"Update Sweet\" className=\"formBtn\"/>\n                    </form>\n                    <button onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</button>\n                </>\n            ) : (\n                <>\n                    <h4>{text}</h4>\n                    { attachmentUrl && (\n                        <img src={attachmentUrl}/>\n                    )}\n                    {/* 유저와 작성자가 동일한 경우에만 버튼 보이도록 */}\n                    { isOwner && (\n                        <div className=\"sweet_actions\">\n                            <span onClick={onDeleteClick}>\n                                <FaTrashAlt/>\n                            </span>\n                            <span onClick={toggleEditing}>\n                                <FaPencilAlt/>\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </SweetStyles>\n    );\n};\n\nexport default Sweet;","import React, { useState } from 'react';\nimport { dbService, storageService } from 'fbase';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FaPlus, FaTimes } from 'react-icons/fa'\nimport styled from 'styled-components';\n\nconst SweetFactoryStyles = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    .factoryInput_container {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-wrap: wrap;\n        position: relative;\n        margin-bottom: 2rem;\n        width: 100%;\n        .factoryInput_input {\n            flex-grow: 1;\n            height: 40px;\n            padding: 0 2rem;\n            color: #fff;\n            border: 1px solid #04aaff;\n            border-radius: 20px;\n            font-weight: 500;\n            font-size: 1.2rem;\n        }\n        .factoryInput_arrow {\n            position: absolute;\n            right: 0;\n            background-color: #04aaff;\n            height: 40px;\n            width: 40px;\n            padding: 1rem 0;\n            text-align: center;\n            border-radius: 20px;\n            color: #fff;\n            cursor: pointer;\n        }\n    }\n    .factory_label {\n        width: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        color: #04aaff;\n        cursor: pointer;\n        transition: color .4s;\n        span {\n            padding: 0 1rem;\n        }\n        &:hover {\n            color: tomato;\n        }\n    }\n    .factoryFrom_attachment {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        img {\n            height: 80px;\n            width: 80px;\n            border-radius: 40px;\n        }\n        .factoryForm_clear {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            color: #04aaff;\n            cursor: pointer;\n            text-align: center;\n            margin: 1rem 0;\n            transition: color .4s;\n            span {\n                font-size: 1.4rem;\n                padding: 0 1rem;\n            }\n            &:hover {\n                color: tomato;\n            }\n        }\n    }\n`;\n\nconst SweetFactory = ({ userObj }) => {\n    const [sweet, setSweet] = useState('')\n    //URL 상태관리\n    const [attachment, setAttachment] = useState('')\n\n    const onChange = (e) => {\n        const { value } = e.target\n        setSweet(value)\n    }\n\n    //firestore에 데이터 저장하기\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        if(sweet === ''){\n            return;\n        }\n        let attachmentUrl = '';\n        if(attachment !== ''){\n            //storage는 아이디를 자동으로 생성하지 않음 \n            //userObj.uid: 폴더명, uuidv4(): 파일이름 \n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\n            const response = await attachmentRef.putString(attachment, \"data_url\")\n            attachmentUrl = await response.ref.getDownloadURL()//파일을 다운로드 할 수 있는 URL 반환\n        }\n        //컬렉션을 생성하고, 해당 컬렉션에 도큐먼트 추가 \n        await dbService.collection(\"sweets\").add({\n            text: sweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        })\n        setSweet('')\n        setAttachment('')\n    }\n\n    //웹 브라우저에 사진 출력하기 \n    const onFileChange = (e) => {\n        const { files } = e.target \n        const theFile = files[0] // files는 배열형태 \n        const reader = new FileReader()\n        //onloadend: readAsDataURL함수로 전달할 인자(파일)가 함수로 들어간 이후\n        //결괏값이 나온 다음 상황 감지하고, 그때 생긴 이벤트값을 사용 가능하게 해줌 \n        reader.onloadend = (finishedEvent) => {\n            const { result } = finishedEvent.currentTarget\n            setAttachment(result)\n        }\n        //readAsDataURL함수: 파일 정보를 인자로 받아서 파일 위치를 URL로 반환\n        //웹 브라우저가 파일을 인식하는 시점, 파일 인식이 끝난 시점까지 함께 관리해줘야\n        //URL을 얻을 수 있음 \n        if(Boolean(theFile)){\n            reader.readAsDataURL(theFile)\n        }\n    }\n    //파일 선택 취소하기 \n    const onClearAttachment = () => setAttachment('')\n    \n    return (\n        <SweetFactoryStyles onSubmit={onSubmit}>\n            <div className=\"factoryInput_container\">\n                <input \n                type=\"text\" \n                placeholder=\"What's on your mind?\" \n                maxLength={120}\n                value={sweet}\n                onChange={onChange}\n                className=\"factoryInput_input\"\n                />\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput_arrow\"/>\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factory_label\">\n                <span>Add photos</span>\n                <FaPlus/>\n            </label>\n            <input \n            id=\"attach-file\" \n            type=\"file\" \n            accept=\"image/*\" \n            onChange={onFileChange}\n            style={{ opacity: 0 }}/>\n            { attachment && (\n                <div className=\"factoryFrom_attachment\">\n                    <img \n                    src={attachment} \n                    style={{ backgroundImage: attachment }}\n                    />\n                    <div className=\"factoryForm_clear\" onClick={onClearAttachment}>\n                        <span>Remove</span>\n                        <FaTimes/>\n                    </div>\n                </div>\n            )}\n        </SweetFactoryStyles>\n    );\n};\n\nexport default SweetFactory;","import { dbService } from 'fbase';\nimport React, { useEffect, useState } from 'react';\nimport Sweet from 'components/Sweet';\nimport SweetFactory from 'components/SweetFactory';\nimport styled from 'styled-components';\nimport Covid19 from 'components/Covid19';\n\nconst HomeStyles = styled.div`\n    width: 100%;\n    max-width: 320px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Home = ({ userObj }) => {\n    //firestore에서 받은 데이터 상태관리\n    const [sweets, setSweets] = useState([])\n    \n    //실시간 데이터베이스 \n    useEffect(() => {\n        dbService.collection(\"sweets\")\n        .orderBy(\"createdAt\", \"desc\")\n        .onSnapshot((snapshot) => {\n            const newArray = snapshot.docs.map((document) => ({\n                id: document.id,\n                ...document.data(),\n            }))\n            setSweets(newArray)\n        })\n    },[])\n\n\n    return (\n        <HomeStyles>\n            <SweetFactory userObj={userObj}/>\n            <div>\n                { sweets.map((sweet) => (\n                    <Sweet \n                    key={sweet.id} \n                    {...sweet}\n                    isOwner={sweet.creatorId === userObj.uid}\n                    userObj={userObj}\n                    //작성한 유저만에 삭제, 수정 가능하도록\n                    />\n                ))}\n            </div>\n            <Covid19/>\n        </HomeStyles>\n    );\n};\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport { authService, dbService } from 'fbase';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Sweet from 'components/Sweet';\n\nconst ProfileStyles = styled.div`\n    width: 100%;\n    max-width: 320px;\n    display: flex;\n    flex-direction: column;\n    .profileFrom {\n        width: 100%;\n        display: flex;\n        flex-direction: column; \n        border-bottom: 1px solid rgba(255, 255, 255, 0.9);\n        padding-bottom: 3rem;\n        margin-bottom: 3rem; \n    }\n    .formInput {\n        width: 100%;\n        padding: 10px 20px;\n        border-radius: 20px;\n        border: 1px solid black;\n        text-align: center;\n        background-color: white;\n        color: black;\n    }\n    .formBtn {\n        cursor: pointer;\n        width: 100%;\n        padding: 7px 20px;\n        text-align: center;\n        color: white;\n        border-radius: 20px;\n        background-color: #04aaff;\n        margin-top : 1rem;\n    }\n    .logOut {\n        margin-top: 5rem;\n        background-color: tomato;\n    }\n`;\n\nconst Profile = ({ userObj, refreshUser }) => {\n    //리다이렉트 \n    const history = useHistory()\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n    const [userSweets, setUserSweets] = useState([])\n\n    const onLogOutClick = () => {\n        authService.signOut()\n        history.push('/') //로그아웃시 처음 화면으로 이동\n    }\n\n    const getMySweets = async () => {\n        const sweets = await dbService\n        .collection(\"sweets\")\n        .where(\"creatorId\", \"==\", userObj.uid)\n        .orderBy(\"createdAt\", \"asc\")\n        .get()\n\n        setUserSweets(sweets.docs.map(doc => doc.data()))\n    }\n\n    useEffect(() => {\n        getMySweets()\n    },[])\n\n    const onChange = (e) => {\n        const { value } = e.target \n        setNewDisplayName(value)\n    }\n\n    //입력된 값으로 사용자 프로필명 업데이트하기 \n    const onSubmit = async (e) => {\n        e.preventDefault()\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({ displayName: newDisplayName })\n            refreshUser()\n        }\n    }\n    return (\n        <ProfileStyles>\n            <form onSubmit={onSubmit} className=\"profileFrom\">\n                <input \n                type=\"text\" \n                placeholder=\"Dsplay name\" \n                value={newDisplayName}\n                onChange={onChange}\n                autoFocus\n                className=\"formInput\"\n                />\n                <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\"/>\n            </form>\n            <ul>\n                { userSweets.map((sweet, index) => {\n                    return (\n                        <Sweet key={index} {...sweet} userObj={userObj}/>\n                    )\n                })}\n            </ul>\n            <span className=\"formBtn logOut\" onClick={onLogOutClick}>Log Out</span>\n        </ProfileStyles>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaTwitter, FaUser } from 'react-icons/fa';\nimport styled from 'styled-components';\n\nconst NavigationStyles = styled.nav`\n    ul {\n        display: flex;\n        justify-content: center;\n        margin-top: 5rem;\n        .nav_home {\n            margin-right: 1rem;\n        }\n        .icon {\n            color: #04AAFF;\n        }\n        .nav_progile {\n            margin-left: 1rem;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            font-size: 1.2rem;\n            span {\n                margin-top: 1rem;\n            }\n        }\n    }\n`;\n\nconst Navigation = ({ userObj }) => {\n    return (\n        <NavigationStyles>\n           <ul>\n               <li>\n                    <Link to=\"/\" className='nav_home'>\n                        <FaTwitter className='icon' size='5ex'/>\n                    </Link>\n               </li>\n               <li>\n                    <Link to=\"/profile\" className='nav_progile'>\n                        <FaUser className='icon' size='5ex'/>\n                        <span>\n                            { userObj.displayName ? `${userObj.displayName}의 Profile` : \"Profile\"}\n                        </span>\n                    </Link>\n               </li>\n           </ul>\n        </NavigationStyles>\n    );\n};\n\nexport default Navigation;","import { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Profile from 'routes/Profile';\nimport Navigation from './Navigation';\nimport styled from 'styled-components';\n\nconst RouterStyles = styled.div`\n    max-width: 890px;\n    width: 100%;\n    margin: 0 auto;\n    margin-top: 8rem;\n    display: flex;\n    justify-content: center;\n`;\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n\n    return (\n        <Router>\n            { isLoggedIn && <Navigation userObj={userObj}/> }\n            <Switch>\n                { isLoggedIn ? (\n                    <RouterStyles>\n                        <Route exact path=\"/\">\n                            <Home userObj={userObj}/>\n                        </Route>\n                        <Route exact path=\"/profile\">\n                            <Profile userObj={userObj} refreshUser={refreshUser}/>\n                        </Route>\n                    </RouterStyles>\n                ) : (\n                    <Route exact path=\"/\">\n                        <Auth/>\n                    </Route>\n                )}\n                {/* Redirect: from에 있는 값이 엔드포인트와 같지 않으면 to로 이동 */}\n                {/* <Redirect from=\"*\" to=\"/\"/> */}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  //로그인 정보 받고 상태가 변경되었는지  \n  const [init, setInit] = useState(false)\n  const [userObj, setUserObj] = useState(null)\n\n  //firebase 로그인 정보를 받게 되었을 때, 로그인 완료 이후 보여줄 화면 렌더링하기 \n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        //리액트는 상태나 프롭스 내용물이 많으면, 그 안에 작은 변화를 제대로 인식하지 못함\n        //user에서 사용하는 것만 뽑아 넣어주기, 크기 줄이고, 가볍게\n        setUserObj({  \n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        })\n      } else {\n        setUserObj(false)\n      }\n      setInit(true)\n    })\n  },[])\n\n  //새 user를 userObj에 업데이트 하기  \n  const refreshUser = () => {\n    const user = authService.currentUser\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    })\n  }\n\n  return (\n    <>\n      {/* init 상태 변경되면 해당 화면 보여주기 */}\n      { init ? (\n        <AppRouter \n        isLoggedIn={Boolean(userObj)} \n        userObj={userObj} \n        refreshUser={refreshUser}\n        />\n      ) : (\n        \"initializing\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst  GlobalStyles = createGlobalStyle`\n    *{\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n    }\n    html {\n        font-size: 10px;\n    }\n    body {\n        background-color: black;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\n            Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n        font-size: 14px;\n        color: white;\n    }\n    ul,li{\n        list-style: none;\n    }\n    a{\n        text-decoration: none;\n        color: inherit;\n    }\n    input {\n        all: unset;\n        box-sizing: border-box;\n        appearance: none;\n    }\n    button{\n        outline: none;\n        background-color: white;\n        color: black;\n        border: none;\n    }\n    form {\n        width: 100%;\n    }\n`;\n\nexport default GlobalStyles;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport GlobalStyles from 'styles/GlobalStyle';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}