{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Sweet.js","components/SweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","password","form","setFrom","newAccount","setNewAccount","error","setError","onChange","e","target","value","name","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","onClick","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Sweet","id","text","attachmentUrl","isOwner","editing","setEditing","newSweet","setNewSweet","onDeleteClick","window","confirm","doc","delete","refFromURL","toggleEditing","update","src","width","height","SweetFactory","userObj","sweet","setSweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","sweets","setSweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","data","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3ea98453.chunk.js","sourcesContent":["// v9 compat packages are API compatible with v8 code\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID \n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import React, { useState } from 'react';\nimport { authService } from \"fbase\";\n\nconst AuthForm = () => {\n    // const [email, setEmail] = useState('')\n    // const [password, setPassword] = useState('')\n    // input 여러개 관리--> onChange 함수 1개만 만들면 됨\n    const [form, setFrom] = useState({\n        email: '',\n        password: ''\n    })\n    const { email, password } = form\n    //회원가입과 로그인 \n    const [newAccount, setNewAccount] = useState(true)\n    const [error, setError] = useState('')\n\n    const onChange = (e) => {\n        const { value, name } = e.target\n        setFrom({\n            ...form,\n            [name]: value\n        })\n    }\n\n    //authService에 함수들은 서버로 값을 요청해서 결괏값을 수신 받기까지 시간이 걸리기때문에\n    //로그인 또는 회원가입 인증이 처리된 이후에 실행하라고 async,await문 사용 \n    const onSubmit = async (e) => {\n        e.preventDefault()//submit 이벤트의 발생시 일어나는 새로고침 막아줌\n        try {\n            let data;\n            if(newAccount){\n                //Create newAccount\n                //브라우저 내장 데이터베이스(IndexedDB)에 사용자 정보 저장됨 \n                data = await authService.createUserWithEmailAndPassword(email, password)\n            } else {\n                //Log In\n                data = await authService.signInWithEmailAndPassword(email, password)\n            }\n        } catch(error){\n            setError(error.message)\n        }\n    }\n\n    const toggleAccount = () => {\n        setNewAccount(!newAccount)\n    }\n    \n    return (\n        <>\n           <form onSubmit={onSubmit}>\n               <input \n               type=\"email\" \n               name=\"email\" \n               placeholder=\"email\" \n               required\n               value={email}\n               onChange={onChange}\n               />\n               <input \n               type=\"password\" \n               name=\"password\" \n               placeholder=\"password\" \n               required\n               value={password}\n               onChange={onChange}\n               />\n               <input \n               type=\"submit\" \n               value={newAccount ? \"Create Account\" : \"Log In\"}\n               />\n               {error}\n           </form>\n           <span onClick={toggleAccount}>\n           {newAccount ? \"Sign In\" : \"Create Account\"}\n           </span>\n        </>\n    );\n};\n\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\n\nconst Auth = () => {\n\n    const onSocialClick = async (e) => {\n        const { name } = e.target\n        let provider;//소셜로그인 서비스 제공업체 \n        if(name === 'google'){\n            provider = new firebaseInstance.auth.GoogleAuthProvider()\n        } else if(name === 'github'){\n            provider = new firebaseInstance.auth.GithubAuthProvider()\n        }\n        const data = await authService.signInWithPopup(provider)//소셜로그인 진행 \n    }\n\n    return ( \n        <div>\n            <AuthForm/>\n           <div>\n                <button name=\"google\" onClick={onSocialClick}>\n                   Continue with Google\n                </button>\n                <button name=\"github\" onClick={onSocialClick}>\n                   Continue with Github\n                </button>\n           </div>\n        </div>\n    );\n};\n\nexport default Auth;","import React, { useState } from 'react';\nimport { dbService, storageService } from 'fbase';\n\nconst Sweet = ({ id, text, attachmentUrl, isOwner }) => {\n    const [editing, setEditing] = useState(false)\n    const [newSweet, setNewSweet] = useState(text)\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm('삭제하시겠습니까?')//boolean 값 반환 \n        if(ok){\n            await dbService.doc(`sweets/${id}`).delete()\n            if(attachmentUrl !== ''){ //저장된 이미지 삭제 \n                await storageService.refFromURL(attachmentUrl).delete()\n            }\n        }\n    }\n\n    const toggleEditing = () => setEditing(!editing)\n\n    const onChange = (e) => {\n        const { value } = e.target \n        setNewSweet(value)\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        await dbService.doc(`sweets/${id}`).update({text: newSweet})\n        setEditing(false)\n    }\n    return (\n        <div>\n            { editing ? (\n                <>\n                    <form onSubmit={onSubmit}>\n                        <input \n                        type=\"text\" \n                        required \n                        value={newSweet} \n                        onChange={onChange}\n                        />\n                        <input type=\"submit\" value=\"Update Sweet\" />\n                    </form>\n                    <button onClick={toggleEditing}>Cancel</button>\n                </>\n            ) : (\n                <>\n                    <h4>{text}</h4>\n                    { attachmentUrl && (\n                        <img src={attachmentUrl} width=\"50px\" height=\"50px\"/>\n                    )}\n                    {/* 유저와 작성자가 동일한 경우에만 버튼 보이도록 */}\n                    { isOwner && (\n                        <>\n                            <button onClick={onDeleteClick}>Delete Sweet</button>\n                            <button onClick={toggleEditing}>Edit Sweet</button>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Sweet;","import React, { useState } from 'react';\nimport { dbService, storageService } from 'fbase';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst SweetFactory = ({ userObj }) => {\n    const [sweet, setSweet] = useState('')\n    //URL 상태관리\n    const [attachment, setAttachment] = useState('')\n\n    const onChange = (e) => {\n        const { value } = e.target\n        setSweet(value)\n    }\n\n    //firestore에 데이터 저장하기\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        let attachmentUrl = '';\n        if(attachment !== ''){\n            //storage는 아이디를 자동으로 생성하지 않음 \n            //userObj.uid: 폴더명, uuidv4(): 파일이름 \n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\n            const response = await attachmentRef.putString(attachment, \"data_url\")\n            attachmentUrl = await response.ref.getDownloadURL()//파일을 다운로드 할 수 있는 URL 반환\n        }\n        //컬렉션을 생성하고, 해당 컬렉션에 도큐먼트 추가 \n        await dbService.collection(\"sweets\").add({\n            text: sweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        })\n        setSweet('')\n        setAttachment('')\n    }\n\n    //웹 브라우저에 사진 출력하기 \n    const onFileChange = (e) => {\n        const { files } = e.target \n        const theFile = files[0] // files는 배열형태 \n        const reader = new FileReader()\n        //onloadend: readAsDataURL함수로 전달할 인자(파일)가 함수로 들어간 이후\n        //결괏값이 나온 다음 상황 감지하고, 그때 생긴 이벤트값을 사용 가능하게 해줌 \n        reader.onloadend = (finishedEvent) => {\n            const { result } = finishedEvent.currentTarget\n            setAttachment(result)\n        }\n        //readAsDataURL함수: 파일 정보를 인자로 받아서 파일 위치를 URL로 반환\n        //웹 브라우저가 파일을 인식하는 시점, 파일 인식이 끝난 시점까지 함께 관리해줘야\n        //URL을 얻을 수 있음 \n        reader.readAsDataURL(theFile)\n    }\n    //파일 선택 취소하기 \n    const onClearAttachment = () => setAttachment('')\n    \n    return (\n        <form onSubmit={onSubmit}>\n            <input \n            type=\"text\" \n            placeholder=\"What's on your mind?\" \n            maxLength={120}\n            value={sweet}\n            onChange={onChange}\n            />\n            <input type=\"file\" accept=\"image/*\" onChange={onFileChange}/>\n            <input type=\"submit\" value=\"Sweet\"/>\n            { attachment && (\n                <div>\n                    <img src={attachment} width=\"50px\" height=\"50px\"/>\n                    <button onClick={onClearAttachment}>Clear</button>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default SweetFactory;","import { dbService } from 'fbase';\nimport React, { useEffect, useState } from 'react';\nimport Sweet from 'components/Sweet';\nimport SweetFactory from 'components/SweetFactory';\n\nconst Home = ({ userObj }) => {\n    //firestore에서 받은 데이터 상태관리\n    const [sweets, setSweets] = useState([])\n    \n    //실시간 데이터베이스 \n    useEffect(() => {\n        dbService.collection(\"sweets\").onSnapshot((snapshot) => {\n            const newArray = snapshot.docs.map((document) => ({\n                id: document.id,\n                ...document.data(),\n            }))\n            setSweets(newArray)\n        })\n    },[])\n\n\n    return (\n        <>\n            <SweetFactory userObj={userObj}/>\n            <div>\n                { sweets.map((sweet) => (\n                    <Sweet \n                    key={sweet.id} \n                    {...sweet}\n                    isOwner={sweet.creatorId === userObj.uid}\n                    //작성한 유저만에 삭제, 수정 가능하도록\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default Home;","import React, { useState } from 'react';\nimport { authService } from 'fbase';\nimport { useHistory } from 'react-router-dom';\n\nconst Profile = ({ userObj, refreshUser }) => {\n    //리다이렉트 \n    const history = useHistory()\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n\n    const onLogOutClick = () => {\n        authService.signOut()\n        history.push('/') //로그아웃시 처음 화면으로 이동\n    }\n\n    const onChange = (e) => {\n        const { value } = e.target \n        setNewDisplayName(value)\n    }\n\n    //입력된 값으로 사용자 프로필명 업데이트하기 \n    const onSubmit = async (e) => {\n        e.preventDefault()\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({ displayName: newDisplayName })\n            refreshUser()\n        }\n    }\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input \n                type=\"text\" \n                placeholder=\"Dsplay name\" \n                value={newDisplayName}\n                onChange={onChange}\n                />\n                <input type=\"submit\" value=\"Update Profile\"/>\n            </form>\n            <button onClick={onLogOutClick}>Log Out</button>\n        </>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navigation = ({ userObj }) => {\n    return (\n        <nav>\n           <ul>\n               <li>\n                   <Link to=\"/\">Home</Link>\n               </li>\n               <li>\n                   <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\n               </li>\n           </ul>\n        </nav>\n    );\n};\n\nexport default Navigation;","import { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Profile from 'routes/Profile';\nimport Navigation from './Navigation';\n\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n\n    return (\n        <Router>\n            { isLoggedIn && <Navigation userObj={userObj}/> }\n            <Switch>\n                { isLoggedIn ? (\n                    <>\n                        <Route exact path=\"/\">\n                            <Home userObj={userObj}/>\n                        </Route>\n                        <Route exact path=\"/profile\">\n                            <Profile userObj={userObj} refreshUser={refreshUser}/>\n                        </Route>\n                    </>\n                ) : (\n                    <Route exact path=\"/\">\n                        <Auth/>\n                    </Route>\n                )}\n                {/* Redirect: from에 있는 값이 엔드포인트와 같지 않으면 to로 이동 */}\n                {/* <Redirect from=\"*\" to=\"/\"/> */}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  //로그인 정보 받고 상태가 변경되었는지  \n  const [init, setInit] = useState(false)\n  const [userObj, setUserObj] = useState(null)\n\n  //firebase 로그인 정보를 받게 되었을 때, 로그인 완료 이후 보여줄 화면 렌더링하기 \n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        //리액트는 상태나 프롭스 내용물이 많으면, 그 안에 작은 변화를 제대로 인식하지 못함\n        //user에서 사용하는 것만 뽑아 넣어주기, 크기 줄이고, 가볍게\n        setUserObj({  \n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        })\n      } else {\n        setUserObj(false)\n      }\n      setInit(true)\n    })\n  },[])\n\n  //새 user를 userObj에 업데이트 하기  \n  const refreshUser = () => {\n    const user = authService.currentUser\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    })\n  }\n\n  return (\n    <>\n      {/* init 상태 변경되면 해당 화면 보여주기 */}\n      { init ? (\n        <AppRouter \n        isLoggedIn={Boolean(userObj)} \n        userObj={userObj} \n        refreshUser={refreshUser}\n        />\n      ) : (\n        \"initializing\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}